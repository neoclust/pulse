#!/bin/bash
#
# (c) 2015 Siveo, http://http://www.siveo.net
#
# $Id$
#
# This file is part of Mandriva Management Console (MMC).
#
# MMC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# MMC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MMC.  If not, see <http://www.gnu.org/licenses/>.
#

function list_all_imaging_servers_id() {
	local IMAGING_SERVERS_ID=`echo "SELECT id FROM ImagingServer;" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent`
	
	echo ${IMAGING_SERVERS_ID}
}

function list_all_masters() {
	local MASTERS_UUID=`echo "SELECT DISTINCT(uuid) FROM Image WHERE is_master=1" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent`
	
	echo ${MASTERS_UUID}
}

function duplicate_database_records() {
	echo "Duplicating database record for master $2..."
	
	local TO_IMAGING_SERVER_ID=$1
	local MASTER_UUID=$2
	
	if [[ ! -n `echo "SELECT Image.id, Image.uuid, ImageOnImagingServer.fk_image, ImageOnImagingServer.fk_imaging_server FROM Image INNER JOIN ImageOnImagingServer ON ImageOnImagingServer.fk_image = Image.id WHERE uuid='${MASTER_UUID}' AND fk_imaging_server = ${TO_IMAGING_SERVER_ID};" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent` ]]; then
		# Get id of master
		local MASTER_ID=`echo "SELECT id FROM Image where uuid='${MASTER_UUID}' LIMIT 1;" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent`
		# Duplicate master record and create necessary records in ImageOnImagingServer and MasteredOn
		local NEW_MASTER_ID=`echo "INSERT INTO Image (path, name, uuid, Image.desc, checksum, size, is_master, creation_date, fk_creator, ntblfix, fk_state) SELECT path, name, uuid, Image.desc, checksum, size, is_master, creation_date, fk_creator, ntblfix, fk_state FROM Image WHERE id = ${MASTER_ID}; SELECT LAST_INSERT_ID();" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent`
		echo "INSERT INTO ImageOnImagingServer (fk_image, fk_imaging_server) VALUES (${NEW_MASTER_ID}, ${TO_IMAGING_SERVER_ID})" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging
		local FK_IMAGING_LOG=`echo "SELECT fk_imaging_log FROM MasteredOn WHERE fk_image = ${MASTER_ID} LIMIT 1" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent`
		echo "INSERT INTO MasteredOn (fk_image, fk_imaging_log) VALUES (${NEW_MASTER_ID}, ${FK_IMAGING_LOG})" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging
		echo "### Duplicating database record for master ${MASTER_UUID}... Done"
	else
		echo "### No database record duplication needed for master ${MASTER_UUID}"
	fi
}

function list_postimaging_scripts() {
	local MASTER_UUID=$1
	
	local SCRIPTS_ID=`echo "SELECT DISTINCT(PostInstallScriptInImage.fk_post_install_script) FROM Image INNER JOIN PostInstallScriptInImage ON PostInstallScriptInImage.fk_image = Image.id WHERE Image.uuid='${MASTER_UUID}';" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent`
	
	echo ${SCRIPTS_ID}
}

function duplicate_postimaging_scripts() {
	echo "Duplicating post-imaging script $2 record..."
	
	local TO_IMAGING_SERVER_ID=$1
	local SCRIPT_ID=$2
	
	if [[ ! -n `echo "SELECT PostInstallScript.id, PostInstallScriptOnImagingServer.fk_post_install_script, PostInstallScriptOnImagingServer.fk_imaging_server FROM PostInstallScript INNER JOIN PostInstallScriptOnImagingServer ON PostInstallScriptOnImagingServer.fk_post_install_script = PostInstallScript.id WHERE PostInstallScript.id=${SCRIPT_ID} AND fk_imaging_server = ${TO_IMAGING_SERVER_ID};" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent` ]]; then
		# Duplicate the record on PostInstallScriptOnImagingServer
		echo "INSERT INTO PostInstallScriptOnImagingServer (fk_post_install_script, fk_imaging_server) VALUES (${SCRIPT_ID}, ${TO_IMAGING_SERVER_ID})" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging
		echo "### Duplicating post-imaging script ${SCRIPT_ID} record... Done"
	else
		echo "### No record duplication needed for script ${SCRIPT_ID}"
	fi
}

function synch_master_files() {
	echo "Synching contents of master $3..."
	
	local FROM_IMAGING_SERVER_ID=$1
	local TO_IMAGING_SERVER_ID=$2
	local MASTER_UUID=$3
	
	# Synchronize the contents
	if [[ ${FROM_IMAGING_SERVER_ID}  != "1" ]]; then
		# We are synching from remote imaging server to pulse main server
		IP_IMAGING_SERVER=`echo "SELECT url FROM ImagingServer WHERE id='${FROM_IMAGING_SERVER_ID}' LIMIT 1;" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'`
		if [ ! $? -eq 0 ]; then
			echo " 0 101% 0.00kB/s  0:00:00 mysql connection error" > /tmp/synch_masters_${PID}.log
			exit 1
		fi
		rsync -az --info=progress2 root@${IP_IMAGING_SERVER}:/var/lib/pulse2/imaging/masters/${MASTER_UUID}/ /var/lib/pulse2/imaging/masters/${MASTER_UUID}/ >> /tmp/synch_masters_${PID}.log
		if [ ! $? -eq 0 ]; then
			echo " 0 101% 0.00kB/s  0:00:00 rsync error" > /tmp/synch_masters_${PID}.log
			exit 1
		fi
	else
		# We are synching from pulse main server to remote imaging server
		IP_IMAGING_SERVER=`echo "SELECT url FROM ImagingServer WHERE id='${TO_IMAGING_SERVER_ID}' LIMIT 1;" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'`
		if [ ! $? -eq 0 ]; then
			echo " 0 101% 0.00kB/s  0:00:00 mysql connection error" > /tmp/synch_masters_${PID}.log
			exit 1
		fi
		rsync -az --info=progress2 /var/lib/pulse2/imaging/masters/${MASTER_UUID}/ root@${IP_IMAGING_SERVER}:/var/lib/pulse2/imaging/masters/${MASTER_UUID}/ >> /tmp/synch_masters_${PID}.log
		if [ ! $? -eq 0 ]; then
			echo " 0 101% 0.00kB/s  0:00:00 rsync error" > /tmp/synch_masters_${PID}.log
			exit 1
		fi
	fi
	
	echo "### Synching contents of master ${MASTER_UUID}... Done"
}

function synch_postinst_folder() {
	echo "Synching contents of postinst folder..."
	
	local FROM_IMAGING_SERVER_ID=$1
	local TO_IMAGING_SERVER_ID=$2
	
	# Synchronize the folder
	if [[ ${FROM_IMAGING_SERVER_ID}  != "1" ]]; then
		# We are synching from remote imaging server to pulse main server
		local IP_IMAGING_SERVER=`echo "SELECT url FROM ImagingServer WHERE id='${FROM_IMAGING_SERVER_ID}' LIMIT 1;" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'`
		rsync -az --info=progress2 root@${IP_IMAGING_SERVER}:/var/lib/pulse2/imaging/postinst/ /var/lib/pulse2/imaging/postinst/
	else
		# We are synching from pulse main server to remote imaging server
		local IP_IMAGING_SERVER=`echo "SELECT url FROM ImagingServer WHERE id='${TO_IMAGING_SERVER_ID}' LIMIT 1;" | mysql --defaults-extra-file=/root/.my.cnf -uroot imaging --silent | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'`
		rsync -az --info=progress2 /var/lib/pulse2/imaging/postinst/ root@${IP_IMAGING_SERVER}:/var/lib/pulse2/imaging/postinst/
	fi
	
	echo "### Synching contents of postinst folder... Done"
}

function run_synch_all_from_mainpulse() {
	echo "Starting synching of all imaging servers and masters..."
	
	local IMAGING_SERVERS_ID=$(list_all_imaging_servers_id)
	local MASTERS_UUID=$(list_all_masters)
	local FROM_IMAGING_SERVER_ID='1'
	
	for TO_IMAGING_SERVER_ID in ${IMAGING_SERVERS_ID}; do
		echo "Local imaging server will be synched to imaging server ${TO_IMAGING_SERVER_ID}"
		for MASTER_UUID in ${MASTERS_UUID}; do
			echo "Master ${MASTER_UUID} will be synched"
			synch_master_files ${FROM_IMAGING_SERVER_ID} ${TO_IMAGING_SERVER_ID} ${MASTER_UUID}
			duplicate_database_records ${TO_IMAGING_SERVER_ID} ${MASTER_UUID}
			local SCRIPTS_ID=$(list_postimaging_scripts ${MASTER_UUID})
			for SCRIPT_ID in ${SCRIPTS_ID}; do
				duplicate_postimaging_scripts ${TO_IMAGING_SERVER_ID} ${SCRIPT_ID}
			done
		done
		synch_postinst_folder ${FROM_IMAGING_SERVER_ID} ${TO_IMAGING_SERVER_ID}
	done
	
	echo "### Synching of all imaging servers and masters complete"
}

function run_synch_master() {
	echo "Starting synching of master $3 to imaging server $2..."
	
	local FROM_IMAGING_SERVER_ID=$1
	local TO_IMAGING_SERVER_ID=$2
	local MASTER_UUID=$3
	local SCRIPTS_ID=$(list_postimaging_scripts ${MASTER_UUID})
	
	synch_master_files ${FROM_IMAGING_SERVER_ID} ${TO_IMAGING_SERVER_ID} ${MASTER_UUID}
	synch_postinst_folder ${FROM_IMAGING_SERVER_ID} ${TO_IMAGING_SERVER_ID}
	duplicate_database_records ${TO_IMAGING_SERVER_ID} ${MASTER_UUID}
	for SCRIPT_ID in ${SCRIPTS_ID}; do
		duplicate_postimaging_scripts ${TO_IMAGING_SERVER_ID} ${SCRIPT_ID}
	done
	
	echo "### Synching of master ${MASTER_UUID} to imaging server ${TO_IMAGING_SERVER_ID} complete"
}

# For synching all masters to all imaging servers, call run_synch_all_from_mainpulse
# To synch one master to one imaging server, call run_synch_master <FROM_IMAGING_SERVER_ID> <TO_IMAGING_SERVER_ID> <MASTER_UUID>

exec &> /tmp/pulse2-synch-masters.log
PID=$$
# Find out if a synch has already been done
grep "$1 1 $3" /tmp/pulse2-synch-masters.out
if [[ $1  != "1" && $2 != "1" && $? -ne 0 ]]; then
	# If the source is a remote imaging server, synch to main pulse first. Rerun the same script with new parameters
	echo "0000 $1 1 $3" >> /tmp/pulse2-synch-masters.out
	echo "${PID} $1 $2 $3" >> /tmp/pulse2-synch-masters.out
	touch /tmp/synch_masters_${PID}.log
	/usr/bin/pulse2-synch-masters $1 1 $3
fi
if [[ $2 == "1" ]]; then
	echo "${PID} $1 $2 $3" >> /tmp/pulse2-synch-masters.out
	run_synch_master $1 1 $3
else
	echo "${PID} $1 $2 $3" >> /tmp/pulse2-synch-masters.out
	run_synch_master 1 $2 $3
fi
